{"version":3,"file":"index-6G8ThJhs.js","sources":["../../src/programa.ts"],"sourcesContent":["import './scss/estilos.scss';\n\nconsole.log('..:: EnFlujo ::..');\n\nconst lienzo = document.getElementById('lienzo') as HTMLCanvasElement;\nconst c = lienzo.getContext('2d') as CanvasRenderingContext2D;\n\nlienzo.width = window.innerWidth;\nlienzo.height = window.innerHeight;\n\n// Definir la interfaz para el mouse\ninterface PosicionRaton {\n  x: number;\n  y: number;\n}\n\nconst mouse: PosicionRaton = {\n  x: window.innerWidth / 2,\n  y: window.innerHeight / 2,\n};\n\n// Event Listeners\naddEventListener('mousemove', (event: MouseEvent) => {\n  mouse.x = event.clientX;\n  mouse.y = event.clientY;\n});\n\n//Para activar el efecto de distorsión de las particulas al dar click\nlet hayClic = false; //Variable booleana que cambia cuando damos click\n\naddEventListener('mousedown', () => {\n  hayClic = true;\n});\n//Este evento se utiliza para identificar cuando ya no hay click\naddEventListener('mouseup', () => {\n  hayClic = false;\n});\n\n//Variables y Listas para los colores Colores\n\nconst coloresOriginales: string[] = ['#2185C5', '#7ECEFD', '#FFF6E5', '#FF7F66'];\nconst coloresB: string[] = ['#c11b8f', '#c673be', '#c494d6', '#beb2ef'];\nlet coloresActuales: string[] = coloresOriginales;\n\n//Variables para llamar los botones que cambian las paletas de color de las particulas (estrellas)\n\nconst btnColoresOg = document.getElementById('paleta-A') as HTMLCanvasElement;\nconst btnColoresB = document.getElementById('paleta-B') as HTMLCanvasElement;\n\n// Cambiar colores al presionar los botones\n\n// FUNCION para actualizar los colores de las particulas---Se usa para que los colores de las partículas cambien sin necesidad de reinicializarlas con (init)\nfunction actualizarColores() {\n  particulas.forEach((particula) => {\n    particula.color = coloresActuales[Math.floor(Math.random() * coloresActuales.length)];\n  });\n}\n// Cambiar colores al presionar los botones, sin reiniciar las partículas\nbtnColoresOg.addEventListener('click', () => {\n  coloresActuales = coloresOriginales;\n  actualizarColores(); // Llama a la función que actualiza los colores de las partículas\n});\n\nbtnColoresB.addEventListener('click', () => {\n  coloresActuales = coloresB;\n  actualizarColores(); //Llama a la función que actualiza los colores de las partículas\n});\n\n/*\n\n//Esta logica funciona de forma diferente pero también es interesante\n\nbtnColoresOg.addEventListener('click', () => {\n  coloresActuales = coloresOriginales;\n  init(); // Regenera las partículas con la paleta de colores original\n});\n\nbtnColoresB.addEventListener('click', () => {\n  coloresActuales = coloresB; // Cambia a la nueva lista de colores\n  init(); // Regenera las partículas con la nueva paleta de colores\n});\n*/\n\n/*\nbtnColoresB.onclick = () => {\n\n};\n*/\n\n//Para redimensionar nuestro lienzo (Canvas)\naddEventListener('resize', () => {\n  lienzo.width = innerWidth;\n  lienzo.height = innerHeight;\n\n  init();\n});\n\n// Definir la clase Partícula: Especifica cómo luce una partícula y en qué parte de la pantalla deben ir estas partículas,\n//cuál es el radio de cada partícula (tienen radios diferentes)\nclass Particula {\n  x: number;\n  y: number;\n  radio: number;\n  color: string;\n\n  constructor(x: number, y: number, radio: number, color: string) {\n    this.x = x;\n    this.y = y;\n    this.radio = radio;\n    this.color = color;\n  }\n\n  dibujar() {\n    c.beginPath();\n    c.arc(this.x, this.y, this.radio, 0, Math.PI * 2, false); //arc es otra palabra para definir un círculo\n    c.shadowColor = this.color;\n    c.shadowBlur = 15; //Efecto de desenfoque para la partícula\n    c.fillStyle = this.color;\n    c.fill();\n    c.closePath();\n  }\n\n  actualizar() {\n    this.dibujar();\n  }\n}\n\n// Implementation - Crear las partículas y asegurarse de que lucen diferentes la una de la otra\nlet particulas: Particula[];\nfunction init() {\n  particulas = [];\n\n  //En este loop el numero \"1500\" se refiere al número total de partículas que se crean.\n  for (let i = 0; i < 1500; i++) {\n    // Puedes agregar instancias de Particula aquí\n    // Particulas.push(new Particula(...))\n    // Para cada iteración de nuestro loop, vamos a crear un una nueva partícula\n\n    //Creamos una variable para guardar el ancho del lienzo y le sumamos 300 para\n    //asegurarnos de que las partículas se puedan ver bien en pantallas más anchas y con diferentes relaciones de aspecto.\n    const anchoLienzo = lienzo.width + 1000;\n    const altoLienzo = lienzo.height + 2000;\n\n    const x = Math.random() * anchoLienzo - anchoLienzo / 2; //Para obtener un valor aleatorio entre 0 y el valor del ANCHO total de nuestro Lienzo (Canvas)\n    //En cada iteración de este loop obtenemos un nuevo valor para la coordenada en \"x\" de la particula.\n    //Se usan valores positivos y negativos ya que más adelante hacemos rotar nuestro lienzo para dar la ilusión de que nuestra galaxia está en movimiento.\n\n    const y = Math.random() * altoLienzo - altoLienzo / 2; //Para obtener un valor aleatorio entre 0 y el valor del ALTO total de nuestro Lienzo (Canvas)\n    //En cada iteración de este loop obtenemos un nuevo valor para la coordenada en \"y\" de la particula.\n\n    const radio = 2 * Math.random(); //Asignamos un tamaño aleatorio para cada partícula para que hayan partículas más pequeñas, pero con una radio máximo de 2\n\n    const color = coloresActuales[Math.floor(Math.random() * coloresActuales.length)]; //Aquí seleccionamos un color de forma aleatoria de la lista \"coloresActuales[]\"\n\n    particulas.push(new Particula(x, y, radio, color));\n  }\n\n  //console.log(particulas);\n}\n\nlet radianes = 0; //variable que se utiliza para rotar el Lienzo y dar la ilusión de movimiento.\nlet opacidad = 1; //Variable para asignar el valor opacidad del 'rgba()'. Esta variable cambia dependiendo del tiempo que se mantenga presionado el click.\n\n// Animation Loop\nfunction animate() {\n  requestAnimationFrame(animate);\n\n  //Pintamos el fondo de color negro para dar la ilusión de que estamos en el espacio para luego \"pintar\" sobre ese fondo.\n  //El valor opacidad del 'rgba()' es muy importante para dar la ilusión de que cada partícula deja una estela de luz\n  c.fillStyle = `rgba(10, 10, 10, ${opacidad})`;\n  c.fillRect(0, 0, lienzo.width, lienzo.height);\n\n  //A continuación, creamos la ilusión optica haciendo que nuestro Lienzo (Canvas) rote usando radianes.\n\n  //Nos inserta en este modo que nos permite afectar la rotación de algo de forma independiente al resto del Lienzo (Canvas)\n  c.save();\n  //Debemos hacerlo rotar desde el centro, no desde las esquinas\n  //Movemos el punto de anclaje desde la esquina izquierda superior hacia el centro para hacerlo rotar desde allí:\n  c.translate(lienzo.width / 2, lienzo.height / 2);\n\n  //Debemos asegurarnos de que el valor de la rotación este incrementando en el tiempo para que gire nuestro Lienzo\n  c.rotate(radianes);\n\n  //Debemos hacer que las partículas se rendericen después de que nuestro lienzo rote para que se cree la ilusión de movimiento.\n\n  //Para cada Partícula en nuestro arreglo o lista \"particulas\" vamos a llamar su\n  //función actualizar() que, a su vez, llama a la función dibujar() que dibuja o renderiza CADA partícula\n  particulas.forEach((particula) => {\n    particula.actualizar();\n  });\n\n  c.restore();\n\n  radianes += 0.004; //actualizamos el valor de los radianes al final del loop de animación. Al modificar este valor modificacmos la velocidad de rotación del Lienzo (Canvas)\n\n  //Al modificar el valor con el se compara opacidad (es decir, el número despues de \">=\") cambia la longitud de la estela que dejan las partículas.\n  if (hayClic && opacidad >= 0.03) {\n    opacidad -= 0.025; //Si damos click se reduce el valor de opacidad/transparencia\n  } else if (!hayClic && opacidad < 1) {\n    opacidad += 0.015; //Aumentamos el valor de opacidad/transparencia al soltar el click.\n  }\n}\n\ninit();\n\nanimate();\n"],"names":["lienzo","c","event","hayClic","coloresOriginales","coloresB","coloresActuales","btnColoresOg","btnColoresB","actualizarColores","particulas","particula","init","Particula","x","y","radio","color","__publicField","i","anchoLienzo","altoLienzo","radianes","opacidad","animate"],"mappings":"02BAEA,QAAQ,IAAI,mBAAmB,EAE/B,MAAMA,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAID,EAAO,WAAW,IAAI,EAEhCA,EAAO,MAAQ,OAAO,WACtBA,EAAO,OAAS,OAAO,YAcvB,iBAAiB,YAAcE,GAAsB,CACzCA,EAAM,QACNA,EAAM,OAClB,CAAC,EAGD,IAAIC,EAAU,GAEd,iBAAiB,YAAa,IAAM,CACxBA,EAAA,EACZ,CAAC,EAED,iBAAiB,UAAW,IAAM,CACtBA,EAAA,EACZ,CAAC,EAID,MAAMC,EAA8B,CAAC,UAAW,UAAW,UAAW,SAAS,EACzEC,EAAqB,CAAC,UAAW,UAAW,UAAW,SAAS,EACtE,IAAIC,EAA4BF,EAIhC,MAAMG,EAAe,SAAS,eAAe,UAAU,EACjDC,EAAc,SAAS,eAAe,UAAU,EAKtD,SAASC,GAAoB,CAChBC,EAAA,QAASC,GAAc,CACtBA,EAAA,MAAQL,EAAgB,KAAK,MAAM,KAAK,SAAWA,EAAgB,MAAM,CAAC,CAAA,CACrF,CACH,CAEAC,EAAa,iBAAiB,QAAS,IAAM,CACzBD,EAAAF,EACAK,GACpB,CAAC,EAEDD,EAAY,iBAAiB,QAAS,IAAM,CACxBF,EAAAD,EACAI,GACpB,CAAC,EAwBD,iBAAiB,SAAU,IAAM,CAC/BT,EAAO,MAAQ,WACfA,EAAO,OAAS,YAEXY,GACP,CAAC,EAID,MAAMC,CAAU,CAMd,YAAYC,EAAWC,EAAWC,EAAeC,EAAe,CALhEC,EAAA,UACAA,EAAA,UACAA,EAAA,cACAA,EAAA,cAGE,KAAK,EAAIJ,EACT,KAAK,EAAIC,EACT,KAAK,MAAQC,EACb,KAAK,MAAQC,CACf,CAEA,SAAU,CACRhB,EAAE,UAAU,EACVA,EAAA,IAAI,KAAK,EAAG,KAAK,EAAG,KAAK,MAAO,EAAG,KAAK,GAAK,EAAG,EAAK,EACvDA,EAAE,YAAc,KAAK,MACrBA,EAAE,WAAa,GACfA,EAAE,UAAY,KAAK,MACnBA,EAAE,KAAK,EACPA,EAAE,UAAU,CACd,CAEA,YAAa,CACX,KAAK,QAAQ,CACf,CACF,CAGA,IAAIS,EACJ,SAASE,GAAO,CACdF,EAAa,CAAA,EAGb,QAASS,EAAI,EAAGA,EAAI,KAAMA,IAAK,CAOvB,MAAAC,EAAcpB,EAAO,MAAQ,IAC7BqB,EAAarB,EAAO,OAAS,IAE7Bc,EAAI,KAAK,OAAO,EAAIM,EAAcA,EAAc,EAIhDL,EAAI,KAAK,OAAO,EAAIM,EAAaA,EAAa,EAG9CL,EAAQ,EAAI,KAAK,OAAO,EAExBC,EAAQX,EAAgB,KAAK,MAAM,KAAK,SAAWA,EAAgB,MAAM,CAAC,EAEhFI,EAAW,KAAK,IAAIG,EAAUC,EAAGC,EAAGC,EAAOC,CAAK,CAAC,CACnD,CAGF,CAEA,IAAIK,EAAW,EACXC,EAAW,EAGf,SAASC,GAAU,CACjB,sBAAsBA,CAAO,EAI3BvB,EAAA,UAAY,oBAAoBsB,CAAQ,IAC1CtB,EAAE,SAAS,EAAG,EAAGD,EAAO,MAAOA,EAAO,MAAM,EAK5CC,EAAE,KAAK,EAGPA,EAAE,UAAUD,EAAO,MAAQ,EAAGA,EAAO,OAAS,CAAC,EAG/CC,EAAE,OAAOqB,CAAQ,EAMNZ,EAAA,QAASC,GAAc,CAChCA,EAAU,WAAW,CAAA,CACtB,EAEDV,EAAE,QAAQ,EAEEqB,GAAA,KAGRnB,GAAWoB,GAAY,IACbA,GAAA,KACH,CAACpB,GAAWoB,EAAW,IACpBA,GAAA,KAEhB,CAEAX,IAEAY,EAAQ"}